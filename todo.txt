https://blake2.net/
https://www.schneier.com/cryptography/skein/
https://www.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt

https://github.com/apenwarr/redo#readme
http://cr.yp.to/redo/honest-script.html

Differences from Ninja:
* All dependencies provided in the Manifest behave as order only dependencies.
* It is acceptable for input files to be missing: That is treated as another value of the file
* Build steps that don't create a declared output fail the build if other steps depend on it as an input
  (maybe Ninja already does this?)
* Generator rules:
  * (From Ninja) Not rebuilt when command line changes
  * (From Ninja) Not cleaned by default
  * Always run before all other rules
* msvc_deps_prefix, deps, depfile are unnecessary (except that the .d file should be removed)


Build steps in Shuriken must fulfill the following requirements:
* Must be a pure function; given the same input must generate the same output
* The output must be written only as files and output to stdin/stderr
* The input must be read only from the file system, from the command line and from
  environment variables. This means that input must not come from stdin, network, other
  processes, devices etc. Ideally it should also not depend on time or randomness.
* Must not modify input files. This also includes that input files must not be moved.
  (Every file that the build step did not create is an input file.)
* When inputs are outputs of other build steps, those must be declared as dependencies.
* When the command of the build step returns, all of the processes it created must be dead.

The manifest must fulfill the following requirements:
* There must not be more than one build step that generates any given output file
* No cyclic dependencies


Steps of a Shuriken build:
* Read the manifest file, build Manifest graph, which contains
  - All build steps:
    - Other build steps that (order-only) depend on this build step
    - Command line invocation
    - bool restat
* Read the invocation log, which contains
  - All build invocations that have been successfully run:
    - Output files fingerprints
    - Inputs (fingerprints, but also make sure to handle the access syscall)
    - (Hash of) the build step that the invocation is based on

* Find build invocations that no longer exist in the Manifest graph
  - Remove the outputs
* Find build invocations that are dirty
  - Verify input and output fingerprints
* Find build steps that have no corresponding build invocation

* Construct Tasks graph:
  - From dirty invocations and build steps that don't have an invocation
  - Each task contains
    - Command line invocation
    - Output file fingerprints of prior build invocation (if any)
    - bool restat
    - Other tasks that depend on this one
    - The number of tasks that this task depends on
      - Decremented if a restat task changes nothing
      - The command is not run if the number is zero

* Execute Tasks graph:
  - Invoke commands in parallel
    - Restrict env vars
  - Lint
    - Check that there are no files that are generated by more than one invocation (lint the manifest)
    - File system access
      - Do not read outputs
      - Do not modify inputs (move or change contents)
      - Input files that are outputs of other build invocations are
        declared as dependencies. (How to do this efficiently?)
      - Declared outputs that other rules depend on as inputs are created
      - There are no files that are generated by more than one invocation (lint actual file accesses)
    - Disallowed syscalls
    - Detect and reject daemons
  - When a command is done
    - delete stale outputs
    - record data in the invocation log

* Path stuff
- FileSystem, with in memory and real implementations (for efficient testing)
- Fingerprint stuff
- Function to parse manifest
* Hashing function
* Functionality to parse and write to the invocation log
- Function to delete outputs
* Function to detect insufficiently declared dependencies (how to do this?)

To fill in the first test:
* Generate actual DAG in gen::buildInput
* Add assertions to the property

Steal directly from Ninja:
* getopt (for Windows only)
* manifest_parser / lexer (with modifications)
* deps_log (refactor into invocation log)
* line_printer
* sha1* (from shuriken)
* version
* utils (parts of it, for calculating CPU count, load average etc, GetShellEscapedString)
