http://stackoverflow.com/questions/27234987/how-to-detect-application-terminate-in-kernel-extension-mac-os-x
https://github.com/gdbinit/santa
https://www.exploit-db.com/papers/13176/
http://shakthimaan.com/downloads/hurd/server_writer.pdf
https://spin.atomicobject.com/2015/11/17/vagrant-osx/
https://developer.apple.com/library/mac/technotes/tn2127/_index.html#//apple_ref/doc/uid/DTS10003591-CH1-SECTION2
https://www.synack.com/2015/11/17/monitoring-process-creation-via-the-kernel-part-i/
https://github.com/facebook/osquery
https://capnproto.org/language.html
https://blake2.net/
https://www.schneier.com/cryptography/skein/
https://www.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt
https://github.com/bazelbuild/bazel/blob/master/tools/cpp/CROSSTOOL
https://www.chromium.org/developers/testing/isolated-testing/deterministic-builds
https://codereview.chromium.org/699083004
CppCompileAction.java options.add("-frandom-seed=" + outputFile.getExecPathString());
https://lwn.net/Articles/630074/
https://wiki.debian.org/ReproducibleBuilds/Howto
https://github.com/sevki/build

https://github.com/apenwarr/redo#readme
http://cr.yp.to/redo/honest-script.html

Differences from Ninja:
* Dependencies of builds steps that have been run are deduced from the files that the build
  step read instead of relying on the information in the manifest. (mscv_deps_prefix, deps
  and depfile are ignored, other than that the .d file is removed)
* File hashes are used rather than mtimes (except for generator rules, they still use mtimes)
* msvc_deps_prefix, deps, depfile are unnecessary (except that the .d file should be removed)
* Supports multiple outputs even when deps is specified.
* When the console pool is used, the command is always rebuilt. Reason being
  stdin is not a deterministic source, and it tends to be used for things as tests
  and generator rules anyway.
* Does not fail the build on missing inputs.
* Commands run have only very limited exposure to environment variables

Errors that Shuriken does not detect:
* Nondeterministic problems in invoked build steps
* Build steps whose output depend on certain files *missing*
* Build steps that read from or append to an output file
* Build steps that depend on the contents of system wide folders such as
  /etc, /tmp, /Applications.

Build steps in Shuriken must fulfill the following requirements:
* Must be a pure function; given the same input must generate the same output
* The output must be written only as files and output to stdin/stderr
* The input must be read only from the file system, from the command line and from
  environment variables. This means that input must not come from stdin, network, other
  processes, devices etc. Ideally it should also not depend on time or randomness.
* Must not modify input files. This also includes that input files must not be moved.
  (Every file that the build step did not create is an input file.)
* When inputs are outputs of other build steps, those must be declared as dependencies.
* When the command of the build step returns, all of the processes it created must be dead.

Things to do for increased build correctness:
* Distinguish between read contents vs read metadata in the invocation log;
  if only metadata is read, make sure to write a metadata entry there. Or is this
  good?
* Detect and reject daemons
* Check that there are no files that are generated by more than one invocation (lint the manifest)
* Keep a map from (st_dev, st_ino) => Path. Whenever a directory is created because
  it was missing when the build started, and it turns out that it has already been
  created by someone else, make sure that its (st_dev, st_ino) is not the same as
  some other path that we have seen. That means hardlink and could break the build.
* Need to detect and fail on directories that would have been created to do the
  build that are hard links to each other.
* Validate that the command did not read a file that is an output
  of a target that it does not depend on directly or indirectly.
* No two Paths that case fold/normalize to the same path but have different non
  case folded/normalized representations.
* Function to detect insufficiently declared dependencies (how to do this?)
* Shield commands from env vars
* Make sure the build does the right thing even if targets are specified wrong on the command line
* Hash symlinks in a special way (see fingerprintStat)

Aesthetic bugs:
* Deal with depfile files: Don't treat them as outputs

Large things remaining to do:
* Seems like sandboxd leaks file descriptors .. :-(
* I think dry runs might delete things right now. Also I think it creates directories.
* shk -n in core fails with "shk: build failed: Operation not permitted" (might be related to dry runs deleting things)
* "Linting error: Process unlinked file or directory that it did not create: /Users/peck/prog/client-core/vendor/boink/python/spotify/boinkc/grammar.pyc": Solve by ignoring "*.pyc" files? Or is this the tracer race?
* "shk: build failed: dependency cycle: bindings/objc/libSpotifyObjC.a -> bindings/objc/CMakeFiles/SpotifyObjC.dir/Sources/SPTEntityLookupResponse.m.o -> /Users/peck/prog/client-core/build.ninja/bindings/objc/CMakeFiles/SpotifyObjC.dir/Sources/SPTEntityLookupResponse.m.o -> bindings/objc/libSpotifyObjC.a"
* Seems like should update / relogCommands doesn't work
* Ocasionally recompact (and make sure that stale fingerprints aren't counted)
* Unit test shk::build
* Handle restat rules
* Handle build pools
* Make Ctrl-C terminate sub-processes as well
* Handle generator rules
* Rebuild manifest
* Test to clean build steps that create directories, for example mkdir
* There seems to be a race in TracingCommandRunner. It doesn't always catch deps
* CLI tools:
  * clean
  * commands
  * graph (graphviz)
  * query
  * targets
  * compdb
  * recompact
* Caching
* Distributed caching

* Possible optimizations
  * Stat cache for use by Paths
  * Try reduce number of /bin/sh invocations per command. I think it's 3 now
  * See if adding HAVE_SSSE3, HAVE_XOP, HAVE_SSE41 etc flags for blake2 makes sense
  * Don't calculate hashes twice for racily clean files
  * Building core
    * With ninja from clean: 23m27.851s
    * With shk from clean: 23m57.228s
    * shk build after clean build, time to re-hash outputs: 0m50.672s

* Unit test BuildStatus
* Write documentation
* Fuzz test parsers (invocation log, sandbox, manifest)
* Check test coverage and add missing unit tests

To fill in the first test:
* Generate actual DAG in gen::buildInput
* Add assertions to the property
