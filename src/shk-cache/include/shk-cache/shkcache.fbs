namespace ShkCache;

/// Hash is a 20 byte struct containing a hash.
struct Hash {
  h00: byte;
  h01: byte;
  h02: byte;
  h03: byte;
  h04: byte;
  h05: byte;
  h06: byte;
  h07: byte;
  h08: byte;
  h09: byte;
  h10: byte;
  h11: byte;
  h12: byte;
  h13: byte;
  h14: byte;
  h15: byte;
  h16: byte;
  h17: byte;
  h18: byte;
  h19: byte;
}

table SecondaryIndexKey {
  root_name: string;
  path: string;
  hash: Hash;
}

enum Encoding : byte {
  Raw
}

table IndexFileReference {
  path: string;
  mode: uint;
  encoding: Encoding;
  store_key: Hash;
}

table IndexEntry {
  primary_key: Hash;
  secondary_keys: [SecondaryIndexKey];
  files: [IndexFileReference];
}

table IndexInsertRequest {
  entries: [IndexEntry];
}

table IndexInsertResponse {
}

table IndexGetRequest {
  primary_key: Hash;
}

table IndexGetResponse {
  entry: IndexEntry;
}

rpc_service Index {
  Insert(IndexInsertRequest): IndexInsertResponse (idempotent);
  Get(IndexGetRequest): IndexGetResponse (streaming: "server", idempotent);
}

table StoreInsertRequest {
  expiry: long;
  contents: [ubyte];
}

table StoreInsertResponse {
  key: Hash;
  expiry: long;
}

table StoreGetRequest {
  key: Hash;
}

table StoreGetResponse {
  expiry: long;
  contents: [ubyte];
}

table StoreTouchRequest {
  key: Hash;
  expiry: long;
}

table StoreTouchResponse {
}

rpc_service Store {
  Insert(StoreInsertRequest): StoreInsertResponse (idempotent);
  Get(StoreGetRequest): StoreGetResponse (idempotent);
  Touch(StoreTouchRequest): StoreTouchResponse (idempotent);
}

table StoreConfig {
  /// In bytes, counting the content size. When an entry is larger than this, it
  /// should be chunked by the client.
  soft_store_entry_size_limit: ulong;
  /// In bytes, counting the content size. The server will refuse to store
  /// entries that are larger than this.
  hard_store_entry_size_limit: ulong;
}

table ConfigGetRequest {
}

table ConfigGetResponse {
  config: StoreConfig;
}

rpc_service Config {
  Get(ConfigGetRequest): ConfigGetResponse (idempotent);
}